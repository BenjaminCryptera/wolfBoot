FLASH_SIZE = @BOOTLOADER_PARTITION_SIZE@;
FLASH_START = 0x100000000 - @BOOTLOADER_PARTITION_SIZE@;
BOOTLOADER_JUMP32_START = 0xfffff000;
RESETVECTOR_START = 0xffffffec;
FSP_T_BASE = @FSP_T_BASE@ - 0x1000; /* default base:size 0xFFFFF000:0x3000 [0xfffff000:0x100002000] */
FSP_M_BASE = @FSP_M_BASE@ - 0x1000; /* default base:size 0xfffdd000:0x22000 [0xfffdd000:0xfffff000] */
FSP_S_BASE = @FSP_S_BASE@ - 0x1000; /* default base:size 0xfffc8000:0x15000 [0xfffdd000:0xfffdd000] */
WOLFBOOT_LOAD_BASE = @WOLFBOOT_LOAD_BASE@;
WOLFBOOT_ORIGIN = @WOLFBOOT_ORIGIN@;
OUTPUT_FORMAT(elf32-i386)

MEMORY
{
    FLASH (rx) : ORIGIN = FLASH_START LENGTH = FLASH_SIZE
    RAM (rwx) : ORIGIN = 0x0 LENGTH = FLASH_START
}

SECTIONS
{
    .jmpto32 BOOTLOADER_JUMP32_START : 
    {
       _off_boot = ABSOLUTE(.) & 0xffff;
       KEEP(*(.jmpto32))
    }
    .reset_vector RESETVECTOR_START :
    {
       KEEP(*(.reset_vector))
    }

    .bootloader WOLFBOOT_ORIGIN :
    {
       KEEP(*(.boot*))
       *(.text*)
       *(.rodata*)
       *(.eh_frame*)
       *(.data*)
       . = ALIGN(256);
    }

    .wolfboot FLASH_START :
    {
        _wolfboot_flash_start = .;
        *(.wolfboot)
        _wolfboot_flash_end = .;
    }

    .fsp_t FSP_T_BASE :
    AT(FSP_T_BASE)
    {
        . += 0x0F00;
       _fsp_t_hdr = .;
       KEEP(*(.sig_fsp_t*))
       _start_fsp_t = .;
       *(.fsp_t)
    }

    .fsp_s FSP_S_BASE :
    {
        . += 0x0F00;
       _fsp_s_hdr = .;
       KEEP(*(.sig_fsp_s*))
       _start_fsp_s = .;
       *(.fsp_s)
    }

    .fsp_m FSP_M_BASE :
    {
        . += 0x0F00;
       _fsp_m_hdr = .;
       KEEP(*(.sig_fsp_m*))
       _start_fsp_m = .;
       *(.fsp_m)
    }

}
